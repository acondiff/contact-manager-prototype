{"version":3,"sources":["app.js","common/services/store.js","modules/contacts/ListCtrl.js"],"names":["app","angular","module","moduleLoader","config","$stateProvider","$urlRouterProvider","$locationProvider","$futureStateProvider","state","url","templateUrl","controller","otherwise","run","$rootScope","$state","$stateParams","$scope","contentLoaded","currentAppString","startLocation","$on","event","toState","toParams","fromState","fromParams","name","go","split","updateCurrentContacts","i","currentContacts","contactss","ls","factory","$parse","storage","window","localStorage","undefined","supported","JSON","privateMethods","parseValue","res","val","parse","parseFloat","isObject","e","publicMethods","set","key","value","$","cookie","console","log","saver","stringify","setItem","get","item","getItem","remove","removeItem","bind","def","assign","$watch","$http","$store","list","listOrder","predicate","reverse","editContact","editingContact","cancelEditContact","selectContact","activeContact","id","addingNewContact","removeNewContact","saveEditContact","saveId","positionString","encodeAvatar","el","file","document","querySelector","files","reader","FileReader","addEventListener","$apply","photo","result","readAsDataURL","addNewContact","listId","push","length","splice","selectContactByIndex","filteredListContactIndex","deleteContact","contactIndexBeforeDeleted","parseInt","filteredList","listContactIndex","contact","toJson","focus","index","selectPrevContact","selectNextContact","scrollToSelection","scrollWrap","itemHeight","adjWindowScroll","scrollTop","height","adjSelectedScroll","keyPress","tab","enter","esc","space","left","up","right","down","shift","ctrl","alt","backspace","del","command","keyCode","preventDefault","refreshData","printList","print","clearContactSearch","contactSearch","is","contactSearchMouseDown","init","fname","isArray","listener","success","data"],"mappings":"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","file":"app-0.0.0.min.js","sourcesContent":["var app = angular.module('app', [\n      'ui.router',\n      'ui.bootstrap',\n      'ui.bootstrap.tpls',\n      'ui.select',\n      'ngAnimate',\n      'ngMaterial',\n      'templates',\n      'localStorage'\n]);\n\nvar moduleLoader = 'partials/module-load.html';\n\napp.config(['$stateProvider', '$urlRouterProvider', '$locationProvider',\n\tfunction AppConfig($stateProvider, $urlRouterProvider, $locationProvider, $futureStateProvider) {\n\t$stateProvider\n\t\t.state('contacts',\n\t\t\t{ url: '/contacts',\n\t\t\ttemplateUrl: moduleLoader })\n\t\t\t.state('contacts.list',\n\t\t\t\t{ url: '/list',\n\t\t\t\tcontroller: 'ListCtrl',\n\t\t\t\ttemplateUrl: 'contacts/list.html' });\n\t$urlRouterProvider.otherwise('/contacts/list');\n}]);\n\napp.run(['$rootScope', '$state', '$stateParams', function ($rootScope, $state, $stateParams) {\n  $rootScope.$state = $state;\n  $rootScope.$stateParams = $stateParams;\n}]);\n\napp.controller('AppCtrl', ['$scope', '$rootScope', '$state', function($scope, $rootScope, $state) {\n\t$rootScope.contentLoaded = true;\n\t$scope.currentAppString = $rootScope.startLocation;\n\t$rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {\n\t    if (toState.name === 'contacts' ){\n\t\t\t$state.go('contacts.list');\n\t    }\n\t});\n\t$rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {\n\t    $scope.currentAppString = toState.name.split(\".\")[0];\n\t});\n\t$rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams) {\n\t    $scope.currentAppString = toState.name.split(\".\")[0];\n\t});\n\t$rootScope.updateCurrentContacts = function(i) {\n\t\t$rootScope.currentContacts = $rootScope.contactss[i];\n\t};\n}]);\n","var ls = angular.module('localStorage',[]);\n \nls.factory(\"$store\", ['$parse', function($parse) {\n\t/**\n\t * Global Vars\n\t */\n\tvar storage = (typeof window.localStorage === 'undefined') ? undefined : window.localStorage,\n\t\tsupported = !(typeof storage == 'undefined' || typeof window.JSON == 'undefined');\n\n\tvar privateMethods = {\n\t\t/**\n\t\t * Pass any type of a string from the localStorage to be parsed so it returns a usable version (like an Object)\n\t\t * @param res - a string that will be parsed for type\n\t\t * @returns {*} - whatever the real type of stored value was\n\t\t */\n\t\tparseValue: function(res) {\n\t\t\tvar val;\n\t\t\ttry {\n\t\t\t\tval = JSON.parse(res);\n\t\t\t\tif (typeof val == 'undefined'){\n\t\t\t\t\tval = res;\n\t\t\t\t}\n\t\t\t\tif (val == 'true'){\n\t\t\t\t\tval = true;\n\t\t\t\t}\n\t\t\t\tif (val == 'false'){\n\t\t\t\t\tval = false;\n\t\t\t\t}\n\t\t\t\tif (parseFloat(val) == val && !angular.isObject(val) ){\n\t\t\t\t\tval = parseFloat(val);\n\t\t\t\t}\n\t\t\t} catch(e){\n\t\t\t\tval = res;\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t};\n\tvar publicMethods = {\n\t\t/**\n\t\t * Set - let's you set a new localStorage key pair set\n\t\t * @param key - a string that will be used as the accessor for the pair\n\t\t * @param value - the value of the localStorage item\n\t\t * @returns {*} - will return whatever it is you've stored in the local storage\n\t\t */\n\t\tset: function(key,value){\n\t\t\tif (!supported){\n\t\t\t\ttry {\n\t\t\t\t\t$.cookie(key, value);\n\t\t\t\t\treturn value;\n\t\t\t\t} catch(e){\n\t\t\t\t\tconsole.log('Local Storage not supported, make sure you have the $.cookie supported.');\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar saver = JSON.stringify(value);\n\t\t\tstorage.setItem(key, saver);\n\t\t\treturn privateMethods.parseValue(saver);\n\t\t},\n\t\t/**\n\t\t * Get - let's you get the value of any pair you've stored\n\t\t * @param key - the string that you set as accessor for the pair\n\t\t * @returns {*} - Object,String,Float,Boolean depending on what you stored\n\t\t */\n\t\tget: function(key){\n\t\t\tif (!supported){\n\t\t\t\ttry {\n\t\t\t\t\treturn privateMethods.parseValue($.cookie(key));\n\t\t\t\t} catch(e){\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar item = storage.getItem(key);\n\t\t\treturn privateMethods.parseValue(item);\n\t\t},\n\t\t/**\n\t\t * Remove - let's you nuke a value from localStorage\n\t\t * @param key - the accessor value\n\t\t * @returns {boolean} - if everything went as planned\n\t\t */\n\t\tremove: function(key) {\n\t\t\tif (!supported){\n\t\t\t\ttry {\n\t\t\t\t\t$.cookie(key, null);\n\t\t\t\t\treturn true;\n\t\t\t\t} catch(e){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstorage.removeItem(key);\n\t\t\treturn true;\n\t\t},\n\t\t/**\n         * Bind - let's you directly bind a localStorage value to a $scope variable\n         * @param $scope - the current scope you want the variable available in\n         * @param key - the name of the variable you are binding\n         * @param def - the default value (OPTIONAL)\n         * @returns {*} - returns whatever the stored value is\n         */\n        bind: function ($scope, key, def) {\n            def = def || '';\n            if (!publicMethods.get(key)) {\n                publicMethods.set(key, def);\n            }\n            $parse(key).assign($scope, publicMethods.get(key));\n            $scope.$watch(key, function (val) {\n                publicMethods.set(key, val);\n            }, true);\n            return publicMethods.get(key);\n        }\n\t};\n\treturn publicMethods;\n}]);","app.controller('ListCtrl', ['$scope', '$rootScope', '$http', '$store', function($scope, $rootScope, $http, $store) {\n\n    var list = [];\n\n    $scope.listOrder = function(predicate) {\n        $scope.reverse = (JSON.stringify($scope.predicate) === JSON.stringify(predicate)) ? !$scope.reverse : false;\n        $scope.predicate = predicate;\n    };\n\n    $scope.editContact = function() {\n        $scope.editingContact = true;\n    };\n\n    $scope.cancelEditContact = function() {\n        $scope.editingContact = false;\n        $scope.selectContact($scope.activeContact.id);\n        if($scope.addingNewContact) {\n            $scope.removeNewContact();\n        }\n    };\n\n    $scope.saveEditContact = function() {\n        $scope.editingContact = false;\n        $scope.addingNewContact = false;\n        var saveId = $scope.activeContact.id;\n        for(i in $scope.list) {\n            if(saveId === $scope.list[i].id) {\n                delete $scope.activeContact.positionString;\n                $scope.list[i] = $scope.activeContact;\n            }\n        }\n        $scope.selectContact($scope.activeContact.id);\n    };\n\n    $scope.encodeAvatar = function(el) {\n      var preview = document.querySelector('img');\n      var file = el[0].files[0];\n      var reader = new FileReader();\n      console.log(\"ENCODING AVATAR...\");\n\n      reader.addEventListener(\"load\", function () {\n        $scope.$apply(function() {\n          $scope.activeContact.photo = reader.result;\n        });\n        $scope.saveEditContact();\n      }, false);\n\n      if (file) {\n        reader.readAsDataURL(file);\n      }\n    };\n\n    $scope.addNewContact = function() {\n        if(!$scope.addingNewContact) {\n            var listId = 0;\n            for(i in $scope.list) {\n                if(listId < $scope.list[i].id) {\n                    listId = $scope.list[i].id;\n                }\n            }\n            listId++;\n            $scope.list.push({});\n            $scope.list[$scope.list.length-1].id = listId;\n            $scope.selectContact(listId);\n            $scope.editingContact = true;\n            $scope.addingNewContact = true;\n        }\n    };\n\n    $scope.removeNewContact = function() {\n        $scope.list.splice($scope.list.length-1,1);\n        $scope.addingNewContact = false;\n        $scope.selectContactByIndex($scope.filteredListContactIndex-1);\n    };\n\n    $scope.deleteContact = function(id) {\n        var contactIndexBeforeDeleted = 0;\n        id = (!id) ? $scope.activeContact.id : id;\n        if($scope.list.length > 0) {\n            for(i in $scope.list) {\n                if(id === $scope.list[i].id) {\n                    contactIndexBeforeDeleted = parseInt($scope.filteredListContactIndex);\n                    $scope.list.splice(i,1);\n                }\n            }\n            $scope.addingNewContact = false;\n            $scope.editingContact = false;\n            $scope.$apply();\n            if(contactIndexBeforeDeleted < $scope.filteredList.length-1) {\n                $scope.selectContactByIndex(parseInt($scope.filteredListContactIndex));\n            } else {\n                $scope.selectContactByIndex($scope.filteredList.length-1);\n            }\n        }\n    };\n\n    $scope.selectContact = function(id) {\n        $scope.editingContact = false;\n        for(i in $scope.filteredList) {\n            if($scope.filteredList[i].id === id ) {\n                $scope.filteredListContactIndex = i;\n            }\n        }\n        for(i in $scope.list) {\n            if($scope.list[i].id === id) {\n                $scope.listContactIndex = i;\n            }\n        }\n        var contact = $scope.list[$scope.listContactIndex];\n        contact = angular.toJson(contact,true);\n        contact = JSON.parse(contact);\n        $scope.activeContact = contact;\n        $scope.activeContact.positionString = '';\n        if($scope.addingNewContact) {\n            $scope.removeNewContact();\n        }\n        $('.list-body-wrap').focus();\n    };\n\n    $scope.selectContactByIndex = function(index) {\n        $scope.selectContact($scope.filteredList[index].id);\n    };\n\n    $scope.selectPrevContact = function() {\n        if($scope.filteredListContactIndex>0) {\n            $scope.selectContactByIndex(parseInt($scope.filteredListContactIndex)-1);\n        }\n    }\n\n    $scope.selectNextContact = function() {\n        if($scope.filteredListContactIndex<$scope.filteredList.length-1) {\n            $scope.selectContactByIndex(parseInt($scope.filteredListContactIndex)+1);\n        }\n    }\n\n    $scope.scrollToSelection = function() {\n        var scrollWrap = $('.list-body-wrap');\n        var itemHeight = 48;\n        var adjWindowScroll = scrollWrap.scrollTop()+scrollWrap.height()-itemHeight;\n        var adjSelectedScroll = $scope.filteredListContactIndex*48;\n        if(adjSelectedScroll > adjWindowScroll) {\n            scrollWrap.scrollTop(adjSelectedScroll-scrollWrap.height()+itemHeight-1);\n        } else if(scrollWrap.scrollTop() > $scope.filteredListContactIndex*48) {\n            scrollWrap.scrollTop($scope.filteredListContactIndex*48);\n        }\n    }\n\n    $scope.keyPress = function(e) {\n        var key = {\n            tab: 9,\n            enter: 13,\n            esc: 27,\n            space: 32,\n            left: 37,\n            up: 38,\n            right: 39,\n            down: 40,\n            shift: 16,\n            ctrl: 17,\n            alt: 18,\n            backspace: 8,\n            del: 46,\n            command: 91\n        };\n        if(e.keyCode == key.up || e.keyCode == key.down || e.keyCode == key.del || e.keyCode == key.backspace) {\n            e.preventDefault();\n        }\n        switch(e.keyCode) {\n            case key.up: $scope.selectPrevContact(); $scope.scrollToSelection();\n            break;\n            case key.down: $scope.selectNextContact(); $scope.scrollToSelection();\n            break;\n            case key.del: $scope.deleteContact($scope.activeContact.id);\n            break;\n            case key.backspace: $scope.deleteContact($scope.activeContact.id);\n            break;\n        }\n    }\n\n    $scope.refreshData = function() {\n        $scope.list = [];\n        list = [];\n        $scope.list = list;\n    }\n\n    $scope.printList = function() {\n        window.print();\n    }\n\n    $scope.clearContactSearch = function(event) {\n        $scope.contactSearch = '';\n        if($('#list-search').is(\":focus\")) {\n            $('#list-search').focus();\n        }\n    }\n\n    $scope.contactSearchMouseDown = function(event) {\n        event.preventDefault();\n    }\n\n    $scope.init = function() {\n        $store.bind($scope, 'list', list);\n        if(typeof $scope.list !== 'undefined' && $scope.list.length > 0) {\n            for(i in $scope.list) {\n                if(typeof $scope.list[i].fname === 'undefined') {\n                    $scope.list.splice(i,1);\n                }\n            }\n        } else {\n            $scope.list = list;\n        }\n        $scope.isArray = angular.isArray;\n        $scope.predicate = 'lname';\n        $scope.reverse = false;\n        var listener = $scope.$watch(\"filteredList\", function () {\n            if(typeof $scope.filteredList !== 'undefined' && $scope.filteredList.length > 0) {\n                listener();\n                $scope.selectContactByIndex(0);\n            };\n        });\n    }\n    $http.get('assets/data/contacts.json').success(function(data) {\n       list = data;\n       for(i in list) {\n         list[i].id = parseInt(i);\n       }\n       $scope.init();\n    });\n\n}]);\n"],"sourceRoot":"/source/"}